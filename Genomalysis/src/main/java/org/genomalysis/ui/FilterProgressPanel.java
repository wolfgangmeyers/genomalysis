/*
 * FilterProgressControl.java
 *
 * Created on March 22, 2008, 5:29 AM
 */

package org.genomalysis.ui;

import java.lang.reflect.InvocationTargetException;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.SwingUtilities;

import org.genomalysis.control.FilterProgressControl;
import org.genomalysis.control.IObserver;

/**
 *
 * @author ameyers
 */
public class FilterProgressPanel extends javax.swing.JPanel implements
        IObserver {

    private static final long serialVersionUID = 1L;
    private FilterProgressControl filterProgressControl;

    /** Creates new form FilterProgressControl */
    public FilterProgressPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed"
    // desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lblEstimatedTimeRemaining = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblSequencesRead = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblSequencesWritten = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblTotalSequences = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblPercentComplete = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblFilterPassRatio = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        progressBarComplete = new javax.swing.JProgressBar();

        setLayout(new java.awt.BorderLayout(20, 20));

        jPanel1.setLayout(new java.awt.GridLayout(6, 2, 5, 5));

        jLabel2.setText("Estimated Time Remaining:");
        jPanel1.add(jLabel2);

        lblEstimatedTimeRemaining.setText("0:0:0");
        jPanel1.add(lblEstimatedTimeRemaining);

        jLabel1.setText("Sequences Read:");
        jPanel1.add(jLabel1);

        lblSequencesRead.setText("0");
        jPanel1.add(lblSequencesRead);

        jLabel3.setText("Sequences Written:");
        jPanel1.add(jLabel3);

        lblSequencesWritten.setText("0");
        jPanel1.add(lblSequencesWritten);

        jLabel5.setText("Total Sequences:");
        jPanel1.add(jLabel5);

        lblTotalSequences.setText("0");
        jPanel1.add(lblTotalSequences);

        jLabel6.setText("Percent Complete:");
        jPanel1.add(jLabel6);

        lblPercentComplete.setText("0");
        jPanel1.add(lblPercentComplete);

        jLabel9.setText("Filter Pass Ratio:");
        jPanel1.add(jLabel9);

        lblFilterPassRatio.setText("0");
        jPanel1.add(lblFilterPassRatio);

        add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setLayout(new java.awt.BorderLayout(5, 5));

        jLabel11.setText("Progress:");
        jPanel3.add(jLabel11);

        jPanel2.add(jPanel3, java.awt.BorderLayout.NORTH);

        progressBarComplete.setToolTipText("Sequence Filter Progress");
        jPanel2.add(progressBarComplete, java.awt.BorderLayout.CENTER);

        add(jPanel2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblEstimatedTimeRemaining;
    private javax.swing.JLabel lblFilterPassRatio;
    private javax.swing.JLabel lblPercentComplete;
    private javax.swing.JLabel lblSequencesRead;
    private javax.swing.JLabel lblSequencesWritten;
    private javax.swing.JLabel lblTotalSequences;
    private javax.swing.JProgressBar progressBarComplete;

    // End of variables declaration//GEN-END:variables

    public FilterProgressControl getFilterProgressControl() {
        return filterProgressControl;
    }

    public void setFilterProgressControl(
            FilterProgressControl filterProgressControl) {
        if (this.filterProgressControl != null) {
            this.filterProgressControl.removeObserver(this);
        }
        this.filterProgressControl = filterProgressControl;
        filterProgressControl.addObserver(this);
    }

    private String formatPercentage(double ratio) {
        int percentage = (int) (ratio * 10000);
        return (percentage / 100) + "." + (percentage % 100) + "%";
    }

    private int percentageFromRatio(double ratio) {
        return (int) (ratio * 100);
    }

    public void update() {
        Runnable runnable = new Runnable() {

            public void run() {
                lblSequencesRead.setText(String.valueOf(filterProgressControl
                        .getNumRead()));
                lblSequencesWritten.setText(String
                        .valueOf(filterProgressControl.getNumWritten()));
                lblFilterPassRatio
                        .setText(formatPercentage(filterProgressControl
                                .getPassRatio()));
                lblPercentComplete
                        .setText(formatPercentage(filterProgressControl
                                .getPercentageComplete()));
                lblTotalSequences.setText(String.valueOf(filterProgressControl
                        .getTotalCount()));
                progressBarComplete
                        .setValue(percentageFromRatio(filterProgressControl
                                .getPercentageComplete()));
            }

        };
        if (SwingUtilities.isEventDispatchThread()) {
            runnable.run();
        } else {
            try {
                SwingUtilities.invokeAndWait(runnable);
            } catch (InterruptedException ex) {
                Logger.getLogger(FilterProgressPanel.class.getName()).log(
                        Level.SEVERE, null, ex);
            } catch (InvocationTargetException ex) {
                Logger.getLogger(FilterProgressPanel.class.getName()).log(
                        Level.SEVERE, null, ex);
            }
        }

    }

    public void showError(String errorMsg) {
        // I don't care about errors here...
    }

}
